@page "/email"
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager NavigationManager

<div class="container">
	<div class="row">

		@if (!IsEmailVerifed)
		{
			<div class="col-md-4 offset-lg-4 mt-4">
				<div class="card shadow">
					<div class="card-body text-center">
						<h5>Email Verification</h5>
						<EditForm Model="@me" OnValidSubmit="SendMail">
							<DataAnnotationsValidator />

							@if (!IsEmailSent)
							{
								<InputText id="email" class="form-control mb-3" placeholder="Email"
								@bind-Value="me.UserEmail" />
								<ValidationMessage For="@(() => me.UserEmail)" />

							}

							@if (IsEmailSent)
							{
								<div class="form-group">

									<InputText id="verificationCode" class="form-control mb-3" @bind-Value="me.EnteredCode" placeholder="Enter code" />
								</div>
							}

							<button type="submit" class="btn btn-primary form-control @disabledbutton"> @ButtonTitle</button>

							@if (!string.IsNullOrEmpty(errorMessage))
							{
								<p class="text-danger">@errorMessage</p>
							}
						</EditForm>
					</div>
				</div>
			</div>
		}
		@if (IsEmailVerifed)
		{
			<div class="col-md-6 offset-lg-3 mt-4">
				<div class="card p-4 text-center shadow">
					<div class="card-body">

						<Registration Evf="@EmailToInvoke"></Registration>
					</div>
				</div>
			</div>
		}





	</div>
</div>




@code {

	protected bool IsEmailSent = false;
	protected bool IsEmailVerifed = false;
	protected string disabledbutton = string.Empty;
	protected bool codeGenerated = false;
	private string errorMessage = string.Empty;
	private string EmailToInvoke = string.Empty;
	class ModelEmail
	{
		public string? NewNumber { get; set; }
		[EmailAddress(ErrorMessage = "Invalid Email Address")]
		public string? UserEmail { get; set; }
		public string MessageFrom { get; } = "noreply.tourpk@gmail.com";
		public string AppPassword { get; } = "crulupbvkvdxrnmf";
		[StringLength(5, ErrorMessage = "Entered Code is Invalid")]
		public string? EnteredCode { get; set; }
	}
	public string ButtonTitle = "Send Code";
	ModelEmail me = new ModelEmail();

	private void GenerateCode()
	{
		Random rnd = new Random();
		me.NewNumber = rnd.Next(10000, 99999).ToString();
		codeGenerated = true;
	}

	public async Task SendMail()
	{
		if (me.EnteredCode != null)
		{

			if (me.EnteredCode == me.NewNumber)
			{
				IsEmailVerifed = true;
			}
			else
			{
				errorMessage = "Incorrect verification code. Please try again.";
			}
		}
		else
		{
			if (!string.IsNullOrEmpty(me.UserEmail) && !IsEmailSent)
			{
				try
				{
					GenerateCode();
					disabledbutton = "disabled";
					ButtonTitle = "Sending.......";
					MailMessage mail = new MailMessage();
					EmailToInvoke = me.UserEmail;
					mail.To.Add(me.UserEmail);
					mail.From = new MailAddress(me.MessageFrom, "TourPK");
					mail.Subject = "Verification Code";
					mail.Body = $"Your verification code is {me.NewNumber}";
					mail.IsBodyHtml = true;

					using (SmtpClient smtp = new SmtpClient
					{
						UseDefaultCredentials = false,
						EnableSsl = true,
						Host = "smtp.gmail.com",
						Port = 587,
						DeliveryMethod = SmtpDeliveryMethod.Network,
						Credentials = new System.Net.NetworkCredential(me.MessageFrom, me.AppPassword)
					})
					{
						await smtp.SendMailAsync(mail);
					}

					IsEmailSent = true;					
					ButtonTitle = "Verify";
					disabledbutton = string.Empty;
				}
				catch (SmtpException ex)
				{
					errorMessage = "Please check your internet connection.";
					Console.WriteLine(ex.Message);
				}
			}
			else
			{
				errorMessage = me.UserEmail != null ? "Please Enter Verification Code" : "Please enter your email address.";
			}
		}
	}

}

