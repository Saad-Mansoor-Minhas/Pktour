@page "/cities"
@using Admin.Data;
@using ClassLibraryEntity;
@inject ICityService cityService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Cities</PageTitle>

@if (city != null)  //if city is null, form is not accessible
{
	<h1>@(city.pk_CityId > 0 ? "Edit City" : "Add New City")</h1>

	<EditForm Model="@city" OnValidSubmit="SaveCity">
		<DataAnnotationsValidator />

		<div class="mb-3">
			<label for="CityCode" class="form-label">City Code</label>
			<InputNumber class="form-control" @bind-Value="city.CityCode" />
			<ValidationMessage For="@(() => city.CityCode)" />
		</div>

		<div class="mb-3">
			<label for="CityName" class="form-label">City Name</label>
			<InputText class="form-control" @bind-Value="city.CityName" />
			<ValidationMessage For="@(() => city.CityName)" />
		</div>

		<div class="form-group">
			<button type="submit" class="btn btn-primary">Save</button>
			<button class="btn btn-light" @onclick ="Cancel">Cancel</button>
		</div>
	</EditForm>
}
else
{
	<h1>Cities List</h1>
	<button type="button" @onclick="NavigateToAddCity" class="btn btn-primary">Add City</button>

	<table class="table">
		<thead>
			<tr>
				<th>City Id</th>
				<th>City Code</th>
				<th>City Name</th>
				<th>Delete</th>
				<th>Update</th>
				<th>Viewpoints</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in citiesList)
			{
				<tr>
					<td>@item.pk_CityId</td>
					<td>@item.CityCode</td>
					<td>@item.CityName</td>
					@*<td><button type="button" @onclick="(async () => await DeleteCity(item.CityCode))" class="btn btn-danger">Delete</button></td>
			*@
					<td><button type="button" @onclick="(async () => await ShowConfirmDeleteDialog(item.CityCode))" class="btn btn-danger">Delete</button></td>
					<td><button type="button" @onclick="(async () => await NavigateToUpdateCity(item))" class="btn btn-primary">Edit</button></td>
					<td><button type="button" @onclick="(async () => await NavigateToViewpoints(item.pk_CityId))" class="btn btn-primary">Viewpoints</button></td>

				</tr>
			}
		</tbody>
	</table>
}


@if (showConfirmDeleteDialog)
{

	<div class="modal" style="display: block; background: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;">
		<div style="background: white; padding: 20px; border-radius: 5px;">
			<p>Are you sure you want to delete this city?</p>
			<button type="button" @onclick="DeleteCityConfirmed" class="btn btn-danger">Delete</button>
			<button type="button" @onclick="HideConfirmDeleteDialog" class="btn btn-secondary">Cancel</button>
		</div>
	</div>
}

@code {
	protected List<EntCities> citiesList = new();
	protected EntCities? city;

	protected override async Task OnInitializedAsync()
	{
		await GetCitiesList();
	}

	protected async Task GetCitiesList()
	{
		citiesList = await cityService.GetCities();
	}

	protected async Task DeleteCity(int code)
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
		if (confirmed)
		{
			await cityService.DeleteCity(code);
			await GetCitiesList();
		}
	}
	protected async Task NavigateToUpdateCity(EntCities ent)
	{
		await Task.Run(() => city = ent);

	}
	protected void NavigateToAddCity()
	{
		city = new EntCities();
	}
	protected async Task SaveCity()
	{
		if (city != null) // sending request to api if city is not null, if cancel button is pressed , it means city is null
		{
			if (city.pk_CityId > 0) // Existing city, perform update
			{
				if (city.pk_CityId < 1)
				{
					return;
				}
				await cityService.UpdateCity(city);
			}
			else // New city, perform save
			{
				if (city.CityCode < 0)
				{
					return;
				}
				await cityService.SaveCity(city);
			}
		}

		city = null; // Reset the city object after save/update
		await GetCitiesList();
	}

	protected void Cancel()
	{	
		city = null; // Reset the city object on cancel
	}

	protected bool showConfirmDeleteDialog = false;
	protected int cityToDeleteCode;

	protected async Task ShowConfirmDeleteDialog(int code)
	{
		cityToDeleteCode = code;
		showConfirmDeleteDialog = true;
	}
	protected void HideConfirmDeleteDialog()
	{
		showConfirmDeleteDialog = false;
	}
	protected async Task DeleteCityConfirmed()
	{
		await cityService.DeleteCity(cityToDeleteCode);
		showConfirmDeleteDialog = false;
		await GetCitiesList();
	}

	protected async Task NavigateToViewpoints(int CityId)
	{
		NavigationManager.NavigateTo("/viewpoints/"+CityId);
	}
}
